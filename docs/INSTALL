Deploying Patchwork

Patchwork uses the django framework - there is some background on deploying
django applications here:

 http://www.djangobook.com/en/1.0/chapter20/

You'll need the following (applications used for patchwork development are
in brackets):

  * A python interpreter
  * django
  * A webserver (apache)
  * mod_python or flup
  * A database server (postgresql)

1. Database setup

    At present, I've tested with PostgreSQL and (to a lesser extent) MySQL
    database servers. If you have any (positive or negative) experiences with
    either, email me.

    For the following commands, a $ prefix signifies that the command should be
    entered at your shell prompt, and a > prefix signifies the commant-line
    client for your sql server (psql or mysql)

    Create a database for the system, add accounts for two system users: the
    web user (the user that your web server runs as) and the mail user (the
    user that your mail server runs as). On Ubuntu these are
    www-data and nobody, respectively.

    For PostgreSQL

        $ createdb patchwork
        $ createuser www-data
        $ createuser nobody

	- postgres uses the standard UNIX authentication, so these users
	  will only be accessible for processes running as the same username.
	  This means that no passwords need to be set.

     For MySQL:
        $ mysql
	> CREATE DATABASE 'patchwork';
        > CREATE USER 'www-data'@'localhost' IDENTIFIED BY '<password>';
        > CREATE USER 'nobody'@'localhost' IDENTIFIED BY '<password>';

2. Django setup

        Set up some initial directories in the patchwork base directory:

	 mkdir -p lib/packages lib/python

        At the time of release, patchwork depends on django version 1.0 or
        later. Your distro probably provides this. If not, do a:

         cd lib/packages
         svn checkout http://code.djangoproject.com/svn/django/tags/releases/1.2
         cd ../python
         ln -s ../packages/django/django ./django

        We also use the django-registration infrastructure from
        http://bitbucket.org/ubernostrum/django-registration/. Your distro
        may provide the django-registration python module (in Ubuntu/Debian it's
        called 'python-django-registration'). If not, download the module
        and symlink it to lib/python/ :

         cd lib/packages/
         hg clone http://bitbucket.org/ubernostrum/django-registration/
         cd ../python
         ln -s ../lib/packages/django-registration/registration ./registration

		We also use some Javascript libraries:

		 cd lib/packages
		 mkdir jquery
		 cd jquery
		 wget http://jqueryjs.googlecode.com/files/jquery-1.3.min.js
		 wget http://www.isocra.com/articles/jquery.tablednd_0_5.js.zip
		 unzip jquery.tablednd_0_5.js.zip jquery.tablednd_0_5.js
		 cd ../../../htdocs/js/
		 ln -s ../../lib/packages/jquery/jquery-1.3.min.js ./
		 ln -s ../../lib/packages/jquery/jquery.tablednd_0_5.js ./

	The settings.py file contains default settings for patchwork, you'll
	need to configure settings for your own setup.

	Rather than edit settings.py, create a file 'local_settings.py', and
	override or add settings as necessary. You'll need to define the
	following:

	  SECRET_KEY
	  ADMINS
	  TIME_ZONE
	  LANGUAGE_CODE

        You can generate the SECRET_KEY with the following python code:

          import string, random
          chars = string.letters + string.digits + string.punctuation
          print repr("".join([random.choice(chars) for i in range(0,50)]))

	If you have patchwork installed in somewhere other than /srv/patchwork,
	you'll also need to define:

	  MEDIA_ROOT
	  TEMPLATE_DIRS

        If you wish to enable the XML-RPC interface, add the following to
        your local_settings.py file:

	  ENABLE_XMLRPC = True

	Then, get patchwork to create its tables in your configured database:

	 cd apps/
	 PYTHONPATH=../lib/python ./manage.py syncdb

	And add privileges for your mail and web users:

	Postgresql:
	  psql -f lib/sql/grant-all.postgres.sql patchwork

	MySQL:
	  mysql patchwork < lib/sql/grant-all.mysql.sql


3. Apache setup

Example apache configuration files are in lib/apache/.

mod_python:

	This should be the simpler of the two to set up. An example apache
	configuration file is in:

	  lib/apache/patchwork.mod_python.conf

	However, mod_python and mod_php may not work well together. So, if your
	web server is used for serving php files, the fastcgi method may suit
	instead.

fastcgi:

	django has built-in support for fastcgi, which requires the
	'flup' python module. An example configuration is in:

	  lib/apache/patchwork.fastcgi.conf

	- this also requires the mod_rewrite apache module to be loaded.

	Once you have apache set up, you can start the fastcgi server with:

	  cd /srv/patchwork/apps
	  ./manage.py runfcgi method=prefork \
			      socket=/srv/patchwork/var/fcgi.sock \
			      pidfile=/srv/patchwork/var/fcgi.pid

4. Configure patchwork
    Now, you should be able to administer patchwork, by visiting the
    URL:

      http://your-host/admin/

    You'll probably want to do the following:

      * Set up your projects
      * Configure your website address (in the Sites) section of the admin

5. Subscribe a local address to the mailing list

     You will need an email address for patchwork to receive email on - for
     example - patchwork@, and this address will need to be subscribed to the
     list. Depending on the mailing list, you will probably need to confirm the
     subscription - temporarily direct the alias to yourself to do this.

6. Setup your MTA to deliver mail to the parsemail script

    Your MTA will need to deliver mail to the parsemail script in the email/
    directory. (Note, do not use the parsemail.py script directly). Something
    like this in /etc/aliases is suitable for postfix:

      patchwork: "|/srv/patchwork/apps/patchwork/bin/parsemail.sh"

    You may need to customise the parsemail.sh script if you haven't installed
    patchwork in /srv/patchwork.

    Test that you can deliver a patch to this script:

     sudo -u nobody /srv/patchwork/apps/patchwork/bin/parsemail.sh < mail


Some errors:

* __init__() got an unexpected keyword argument 'max_length'

 - you're running an old version of django. If your distribution doesn't
   provide a newer version, just download and extract django into
   lib/python/django

* ERROR: permission denied for relation patchwork_...

 - the user that patchwork is running as (ie, the user of the web-server)
   doesn't have access to the patchwork tables in the database. Check that
   your web-server user exists in the database, and that it has permissions
   to the tables.

* pwclient fails for actions that require authentication, but a username
  and password is given int ~/.pwclient rc. Server reports "No authentication
  credentials given".

 - if you're using the FastCGI interface to apache, you'll need the
   '-pass-header Authorization' option to the FastCGIExternalServer
   configuration directive.
